page_content='
This obfuscation type targets the names of user-defined symbols within a function or method. It performs randomized renaming of function (method) names, parameter names, and local variable names, while strictly preserving program semantics.

This form of obfuscation aims to disrupt name-based heuristics in static analysis, reverse engineering, or learning-based models, without altering the runtime behavior of the program.

This strategy is effective at eliminating semantic clues carried in identifier names, while maintaining structural and operational correctness of the code.
' metadata={'repo': 'spring-projects/spring-security', 'path': 'samples/xml/contacts/src/main/java/sample/contact/AdminPermissionController.java', 'func_name': 'AdminPermissionController.displayAdminPage', 'language': 'java', 'docstring': 'Displays the permission admin page for a particular contact.', 'url': 'https://github.com/spring-projects/spring-security/blob/98a8467e4c2ae05b3e09c67ece856944fa48ed23/samples/xml/contacts/src/main/java/sample/contact/AdminPermissionController.java#L69-L79', 
'obfus_level': 'tag1_1', 
'obfus_desc': 'Function nameable entity randomization renaming.', 
'constraints': '\nThe transformation is governed by the following constraints:\n- All renamed identifiers must be semantically equivalent to their originals, with no change to logic, behavior, or type correctness.\n- Function names may be renamed as long as **all corresponding call sites are updated consistently**.\n- Parameter names can be replaced with arbitrary but valid alternatives, provided **all references within the function body are correctly updated**.\n- Local variable names may be renamed, individually or in batches, with **consistent substitutions across all reads and writes** within their scope.\n- Renamed identifiers must **not** collide with existing global names, imported symbols, or scoped declarations.\n', 
'typical_changes': '\nIdentifier names can be generated in different styles to increase variability or mimic realistic coding practices. These include:\n- Completely random but syntactically valid identifiers (e.g., `a9fG_23`), ensuring they comply with language-specific naming rules (e.g., not starting with a digit).\n- Patterned or style-based naming conventions such as:\n  - `camelCase` (e.g., `processedData`)\n  - `PascalCase` (e.g., `ProcessedData`)\n  - `snake_case` (e.g., `processed_data`)\n  - `_underscore_init` (e.g., `_tempVar`)\nThese styles may be applied uniformly or mixed randomly to confuse naming-based heuristics or stylistic pattern recognition.\n\nTypical changes include:\n- Renaming function names (e.g., `calculateSum` → `f_XY21`) while updating all invocation points.\n- Changing parameter names to opaque identifiers (e.g., `count` → `a7_b`) without modifying any logic.\n- Replacing descriptive local variable names with randomized or stylized alternatives, preserving all references.\n- Ensuring **consistent, scope-aware symbol resolution** to avoid shadowing or leakage issues.\n', 
'original_code': '@RequestMapping(value = "/secure/adminPermission.htm", method = RequestMethod.GET)\n\tpublic ModelAndView displayAdminPage(@RequestParam("contactId") int contactId) {\n\t\tContact contact = contactManager.getById(Long.valueOf(contactId));\n\t\tAcl acl = aclService.readAclById(new ObjectIdentityImpl(contact));\n\n\t\tMap<String, Object> model = new HashMap<>();\n\t\tmodel.put("contact", contact);\n\t\tmodel.put("acl", acl);\n\n\t\treturn new ModelAndView("adminPermission", "model", model);\n\t}', 
'obfuscated_code': '@RequestMapping(value = " /secure/adminPermission.htm ", method = RequestMethod.GET)\npublic ModelAndView DsZfOhwF_WjadcnjN_I(@RequestParam(" contactId ") int _contact_id) {\n    Contact _downloadable = contactManager.getById(Long.valueOf(_contact_id));\n    Acl _acl = aclService.readAclById(new ObjectIdentityImpl(_downloadable));\n    Map<String, Object> _model = new HashMap<>();\n    _model.put(" contact ", _downloadable);\n    _model.put(" acl ", _acl);\n    return new ModelAndView(" adminPermission ", " model ", _model);\n}', 
'diff': "
[function] displayAdminPage -> DsZfOhwF_WjadcnjN_I\n  - type: ModelAndView\n  - modifiers: @RequestMapping, public\n  - scope: Class Example -> Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)\n  - strategy: \n    For this function entity named displayAdminPage, first locate all its appearances within its scope ['Class Example', 'Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)'], including its definition and all valid references. Then rename it to DsZfOhwF_WjadcnjN_I and substitute all occurrences consistently in the same scope. This transformation preserves type, modifiers, and semantic behavior.\n\n
[parameter] contactId -> _contact_id\n  - type: int\n  - modifiers: @RequestMapping, public\n  - scope: Class Example -> Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)\n  - strategy: \n    For this parameter entity named contactId, first locate all its appearances within its scope ['Class Example', 'Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)'], including its definition and all valid references. Then rename it to _contact_id and substitute all occurrences consistently in the same scope. This transformation preserves type, modifiers, and semantic behavior.\n\n
[local_variable] contact -> _downloadable\n  - type: Contact\n  - modifiers: ()\n  - scope: Class Example -> Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)\n  - strategy: \n    For this local_variable entity named contact, first locate all its appearances within its scope ['Class Example', 'Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)'], including its definition and all valid references. Then rename it to _downloadable and substitute all occurrences consistently in the same scope. This transformation preserves type, modifiers, and semantic behavior.\n\n
[local_variable] acl -> _acl\n  - type: Acl\n  - modifiers: ()\n  - scope: Class Example -> Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)\n  - strategy: \n    For this local_variable entity named acl, first locate all its appearances within its scope ['Class Example', 'Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)'], including its definition and all valid references. Then rename it to _acl and substitute all occurrences consistently in the same scope. This transformation preserves type, modifiers, and semantic behavior.\n\n
[local_variable] model -> _model\n  - type: Map<String,Object>\n  - modifiers: ()\n  - scope: Class Example -> Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)\n  - strategy: \n    For this local_variable entity named model, first locate all its appearances within its scope ['Class Example', 'Function displayAdminPage(→DsZfOhwF_WjadcnjN_I)'], including its definition and all valid references. Then rename it to _model and substitute all occurrences consistently in the same scope. This transformation preserves type, modifiers, and semantic behavior.\n"}